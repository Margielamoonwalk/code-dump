#include<iostream>
#include<ctime>
using namespace std;


#include "SFML/Graphics.hpp"

int main() {
    srand(time(NULL));
    //create 40x40 map, use nested loop to initalize with 0s
    int map[40][40];
    for (int i = 0; i < 40; i++) {
        for (int j = 0; j < 40; j++)
            map[i][j] = 0;
    }


    int x, y, h, w, offset;


    //RANDOMIZER ALGORITHM-------------------------------------------------
    for (int m = 0; m < 10; m++) {

        offset = 0;
        //pick random center point (x and y)
        x = rand() % 40;
        y = rand() % 40;
        //pick a random height (b/t -10 and 10)
        h = rand() % 6 + 8;
        //print out contents of variables for testing.
        cout << "variables are " << x << " , " << y << " , and " << h << endl;


        //offset += rand() % 1 - 1;

        for (int i = y; i < y + h; i++) {
            offset += (rand() % 5 - 2);


            for (int j = x; j < x + (rand() % 6 + 8); j++) { //set new random width each time
                //check to make sure we're not walking off the array
                if (i > 40 || j > 40) {
                    cout << "too big, skipping," << endl;
                    break;
                }
                else {

                    map[j + offset][i] = 2; //set as desert block!
                    cout << "setting " << i << " ,  " << j << " to desert block." << endl;
                }

            }

        }
    }


    //run again with grass--------------------------------------
    for (int m = 0; m < 10; m++) {
        // 
        offset = 0;
        //pick random center point (x and y)
        x = rand() % 40;
        y = rand() % 40;
        //pick a random height (b/t -10 and 10)
        h = rand() % 6 + 8;
        //print out contents of variables for testing.
        cout << "variables are " << x << " , " << y << " , and " << h << endl;


        //offset += rand() % 1 - 1;

        for (int i = y; i < y + h; i++) {
            offset += (rand() % 5 - 2);


            for (int j = x; j < x + (rand() % 6 + 8); j++) { //set new random width each time
                //check to make sure we're not walking off the array
                if (i > 40 || j > 40) {
                    cout << "too big, skipping," << endl;
                    break;
                }
                else {

                    map[j + offset][i] = 1; //set as grass block!
                    cout << "setting " << i << " ,  " << j << " to grass block." << endl;
                }

            }

        }
    }

    cout << "done with randomizer algorithm" << endl;

    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(800, 800), "map"); //set up screen
    sf::Event event; //set up event queue


   //set up blocks
    sf::RectangleShape waterBlock(sf::Vector2f(20, 20));
    waterBlock.setFillColor(sf::Color::Blue);
    sf::RectangleShape grassBlock(sf::Vector2f(20, 20));
    grassBlock.setFillColor(sf::Color{ 0, 150, 0 });
    sf::RectangleShape desertBlock(sf::Vector2f(20, 20));
    desertBlock.setFillColor(sf::Color::Yellow);



    //###################GAME LOOP###############################################################

    while (renderWindow.isOpen()) {//keep window open until user shuts it down

        while (renderWindow.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();

        }//end event loop---------------------------------------------------------------


        //render loop for map
        for (int i = 0; i < 40; i++) { //rows
            for (int j = 0; j < 40; j++) //columns
                if (map[i][j] == 0) { //water is default
                    waterBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(waterBlock);
                }
                else if (map[i][j] == 1) {//grass block
                    grassBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(grassBlock);
                }
                else if (map[i][j] == 2) {//grass block
                    desertBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(desertBlock);
                }
        }


        renderWindow.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end game





/*//2D matrix in SFML
#include<iostream>
#include<ctime>
using namespace std;


#include "SFML/Graphics.hpp"

int main() {
    srand(time(NULL));
    //create 40x40 map, use nested loop to initalize with 0s
    int map[40][40];
    for (int i = 0; i < 40; i++) {
        for (int j = 0; j < 40; j++)
            map[i][j] = 0;
    }


    int x, y, h, w, offset;

    //for (int m = 0; m < 10; m++) {
    // 
    offset = 0;
    //pick random center point (x and y)
    x = rand() % 40;
    y = rand() % 40;
    //pick a random height (b/t -10 and 10)
    h = rand() % 20 + 10;
    //print out contents of variables for testing.
    cout << "variables are " << x << " , " << y << " , and " << h << endl;


    //offset += rand() % 1 - 1;

    for (int i = y; i < y + h; i++) {
        offset += (rand() % 3 - 3);

        cout << "offset is " << offset << endl;
        for (int j = x; j < x + (rand() % 15 + 5); j++) { //set new random width each time
            //check to make sure we're not walking off the array
            if (i > 40 || j > 40) {
                cout << "too big, skipping," << endl;
                break;
            }
            else {

                map[j + offset][i] = 1; //set as grass block!
                cout << "setting " << i << " ,  " << j << " to grass block." << endl;
            }
        }
    }
    // }
    map[x][y] = 2;
    cout << "done with randomizer algorithm" << endl;

    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(800, 800), "map"); //set up screen
    sf::Event event; //set up event queue


   //set up blocks
    sf::RectangleShape waterBlock(sf::Vector2f(20, 20));
    waterBlock.setFillColor(sf::Color::Blue);
    sf::RectangleShape grassBlock(sf::Vector2f(20, 20));
    grassBlock.setFillColor(sf::Color::Green);
    sf::RectangleShape desertBlock(sf::Vector2f(20, 20));
    desertBlock.setFillColor(sf::Color::Yellow);



    //###################GAME LOOP###############################################################

    while (renderWindow.isOpen()) {//keep window open until user shuts it down

        while (renderWindow.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();

        }//end event loop---------------------------------------------------------------


        //render loop for map
        for (int i = 0; i < 40; i++) { //rows
            for (int j = 0; j < 40; j++) //columns
                if (map[i][j] == 0) { //water is default
                    waterBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(waterBlock);
                }
                else if (map[i][j] == 1) {//grass block
                    grassBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(grassBlock);
                }
        }


        renderWindow.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end game
*/

/*
#include "SFML/Graphics.hpp"
#include <iostream>
using namespace std;
//double bXvel = 5;
//double bYvel =-5;

int main() {
    
    int map[40][40];
    for (int i = 0; i < 40; i++) {
        for (int j = 0; j < 40; j++)
            map[i][j] = 0;
    }

    //put a few sample values in (0 is water, 1 is grass, 2 is desert)
    map[20][20] = 1;
    map[24][31] = 1;
    map[12][22] = 2;
    map[39][26] = 2;

    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(800, 800), "map"); //set up screen
    sf::Event event; //set up event queue


   //set up blocks
    sf::RectangleShape waterBlock(sf::Vector2f(20, 20));
    waterBlock.setFillColor(sf::Color::Blue);
    sf::RectangleShape grassBlock(sf::Vector2f(20, 20));
    grassBlock.setFillColor(sf::Color::Green);
    sf::RectangleShape desertBlock(sf::Vector2f(20, 20));
    desertBlock.setFillColor(sf::Color::Yellow);



    //###################GAME LOOP###############################################################

    while (renderWindow.isOpen()) {//keep window open until user shuts it down

        while (renderWindow.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();

        }//end event loop---------------------------------------------------------------


        //render loop for map
        for (int i = 0; i < 40; i++) { //rows
            for (int j = 0; j < 40; j++) //columns
                if (map[i][j] == 0) { //water is default
                    waterBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(waterBlock);
                }
                else if (map[i][j] == 1) {//grass block
                    grassBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(grassBlock);

                }
                else if (map[i][j] == 2) {//deez block
                    desertBlock.setPosition(i * 20, j * 20);
                    renderWindow.draw(desertBlock);
                }
        }


        renderWindow.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;




}
    
    
    */
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    /*
    //game set up (you'll need these two lines in every game)
    sf::RenderWindow renderWindow(sf::VideoMode(500, 500), "Pong Paddle"); //set up screen
    sf::Event event; //set up event queue
    renderWindow.setFramerateLimit(60);

    //paddle1 set up
    sf::RectangleShape paddle1(sf::Vector2f(25.0f, 150.0f));
    paddle1.setFillColor(sf::Color::White); //other colors: https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Color.php
    paddle1.setPosition(25.0f, 250.0f); //set position: this is where the top left corner will be

    sf::RectangleShape paddle2(sf::Vector2f(25.0f, 150.0f));
    paddle2.setFillColor(sf::Color::White); //other colors: https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Color.php
    paddle2.setPosition(460.0f, 25.0f);

    sf::RectangleShape ball(sf::Vector2f(25.0f, 25.0f));
    ball.setFillColor(sf::Color::White);
    ball.setPosition(250.0f, 250.0f);

    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (renderWindow.isOpen()) {//keep window open until user shuts it down
        while (renderWindow.pollEvent(event)) { //look for events

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();
        }
               
           // key board input==================================================================
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) { //checks if "W" is pressed
                paddle1.move(0, -5); //move the rectangle 5 pixels UP on the y axis
                cout << "rectangle moving up" << endl; //for Mo's testing, you can take this out
          }
         if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) { 
                paddle1.move(0, 5); 
                cout << "rectangle down" << endl; 
            }
         if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) { 
             paddle2.move(0, -5); 
             cout << "rectangle moving up" << endl; 
         }
         if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) { 
             paddle2.move(0, 5);
             cout << "rectangle down" << endl;
         }
         //ball physics--------------------------------------------------------
         ball.move(bYvel ,bXvel)
             bYel

         


        //render section-----------------------------------------
        renderWindow.clear(); //wipes screen, without this things smear
        renderWindow.draw(paddle1); //you gotta drew each object
        renderWindow.draw(paddle2);
        renderWindow.draw(ball);
        renderWindow.display(); //flips memory drawings onto screen
    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end game*/







































    /*
    sf::RenderWindow renderWindow(sf::VideoMode(500, 500), "OMG Circle!");
    

    sf::Event event;

    sf::CircleShape circleShape(100); //radius of circle
    circleShape.setFillColor(sf::Color::White); //hmm, what could this do?
    circleShape.setPosition(250.0f, 250.0f); //set position: this is where the top left "corner" will be
    sf::CircleShape circleShape1(100);
    circleShape1.setFillColor(sf::Color::Red);
    circleShape1.setPosition(420.0f, 69.0f);



    //keep window open until user shuts it down
    while (renderWindow.isOpen()) {
        while (renderWindow.pollEvent(event)) {
            if (event.type == sf::Event::EventType::Closed)
                renderWindow.close();
        }

        //render section-----------------------------------------
        renderWindow.clear();
        renderWindow.draw(circleShape);
        renderWindow.draw(circleShape1);

        renderWindow.display();
        */
